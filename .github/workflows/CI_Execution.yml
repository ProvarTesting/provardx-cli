name: CI for feature branches on PR creation

# Controls when the workflow will run
on:
  # Triggers the workflow on opened pull request events but only for the "develop" branch
  pull_request:
    branches:
      - develop
    types: ['opened', 'edited', 'synchronize']
    paths-ignore: ['**.github/**']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      OS:
        description: 'Comma-separated list of OS versions e.g. "windows-latest, ubuntu-latest"'
        default: '"ubuntu-latest"'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  provardx-ci-execution:
    strategy:
      matrix:
        os: ${{ fromJSON(format('[{0}]', inputs.OS || '"ubuntu-latest"')) }}
        nodeversion: [18]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodeversion }}
      - name: 'Cache node_modules'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-v${{ matrix.nodeversion }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-v${{ matrix.nodeversion }}-
      - name: 'sf installation'
        run: |
          npm install -g @salesforce/cli 

      - name: Determine Branch Name
        id: set_branch_name
        run: |
          if [[ "${GITHUB_HEAD_REF}" ]]; then
             echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
          else
             echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          fi

      - name: Check for target branch in Utils repo
        id: check_branch
        uses: actions/github-script@v6
        with:
          script: |
            const branch = process.env.BRANCH_NAME;
            let branchExists = false;
            try {
              await github.rest.repos.getBranch({
                owner: 'ProvarTesting', 
                repo: 'provardx-plugins-utils',
                branch: branch,
              });
              branchExists = true;
            } catch (error) {
              console.log(`Branch ${branch} does not exist, falling back to develop.`);
            }
            return branchExists;

      - name: Check out Utils repo
        uses: actions/checkout@v4
        with:
          repository: ProvarTesting/provardx-plugins-utils
          path: utils
          ref: ${{ steps.check_branch.outputs.result == 'true' && env.BRANCH_NAME || 'develop' }}
          token: ${{ secrets.PATUTILS }}
      - name: Utils build and link
        run: |
            cd utils
            yarn && yarn prepack
            yarn link
      - name: Install Dependencies
        run: |
          yarn
      - name: Link utils package
        run: |
          yarn link @provartesting/provardx-plugins-utils
      - name: Build the project
        run: |
           sf plugins link .
           yarn prepack
      - name: Check out Regression repo
        uses: actions/checkout@v4
        with:
          repository: ProvarTesting/ProvarRegression
          path: ProvarRegression
          ref: AnchalGoel
          token: ${{ secrets.PATREGRESSION }}
      - name: Change permissions
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
               chmod 777 ./bin/run.js
          elif [ "$RUNNER_OS" == "macOS" ]; then
               chmod 777 ./bin/run.js
          fi
        shell: bash
      - name: Execute NUTS
        run: |
          sf plugins link .
          yarn run test:nuts
      - name: Archive NUTS results
        uses: actions/upload-artifact@v3
        with:
          name: nuts-report-${{ matrix.os }}
          path: |
            mochawesome-report
